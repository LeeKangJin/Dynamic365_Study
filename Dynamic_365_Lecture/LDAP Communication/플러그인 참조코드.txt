// <copyright file="PreOperationnew_reservesampledetailUpdate.cs" company="">
// Copyright (c) 2020 All Rights Reserved
// </copyright>
// <author></author>
// <date>2020-04-08 오전 9:31:56</date>
// <summary>Implements the PreOperationnew_reservesampledetailUpdate Plugin.</summary>
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
// </auto-generated>

using System;
using Microsoft.Xrm.Sdk;
using Plugins.Common;

namespace CrmVSSolution_RMSDEV.Plugins
{

    /// <summary>
    /// PreOperationnew_reservesampledetailUpdate Plugin.
    /// </summary>    
    public class PreOperationnew_reservesampledetailUpdate : PluginBase
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PreOperationnew_reservesampledetailUpdate"/> class.
        /// </summary>
        /// <param name="unsecure">Contains public (unsecured) configuration information.</param>
        /// <param name="secure">Contains non-public (secured) configuration information. 
        /// When using Microsoft Dynamics 365 for Outlook with Offline Access, 
        /// the secure string is not passed to a plug-in that executes while the client is offline.</param>
        public PreOperationnew_reservesampledetailUpdate(string unsecure, string secure)
            : base(typeof(PreOperationnew_reservesampledetailUpdate))
        {

            // TODO: Implement your custom configuration handling.
        }


        /// <summary>
        /// Main entry point for he business logic that the plug-in is to execute.
        /// </summary>
        /// <param name="localContext">The <see cref="LocalPluginContext"/> which contains the
        /// <see cref="IPluginExecutionContext"/>,
        /// <see cref="IOrganizationService"/>
        /// and <see cref="ITracingService"/>
        /// </param>
        /// <remarks>
        /// For improved performance, Microsoft Dynamics 365 caches plug-in instances.
        /// The plug-in's Execute method should be written to be stateless as the constructor
        /// is not called for every invocation of the plug-in. Also, multiple system threads
        /// could execute the plug-in at the same time. All per invocation state information
        /// is stored in the context. This means that you should not use global variables in plug-ins.
        /// </remarks>
        protected override void ExecuteCrmPlugin(LocalPluginContext localContext)
        {
            if (localContext == null)
            {
                throw new InvalidPluginExecutionException("localContext");
            }

            //throw new InvalidPluginExecutionException("test");

            //try
            //{
            //    IPluginExecutionContext context = localContext.PluginExecutionContext;
            //    IOrganizationService service = localContext.OrganizationService;

            //    throw new InvalidPluginExecutionException("n1");

            //    if (context.InputParameters["Target"] is Entity)
            //    {
            //        Entity target = (Entity)context.InputParameters["Target"];

            //        if (!target.Contains("new_txt_id")
            //            || !target.Contains("new_txt_pw")
            //            || target["new_txt_id"].ToString() == ""
            //            || target["new_txt_pw"].ToString() == "")
            //        {
            //            throw new Exception("ID & PW를 입력해주시기 바랍니다.");
            //        }

            //        //LDAP Check. 


            //        target["new_txt_id"] = "";
            //        target["new_txt_pw"] = "";

            //        Common c = new Common();

            //        Common.IN_AD_LOGIN loginMetaData = new Common.IN_AD_LOGIN();


            //        loginMetaData.ID = "test";
            //        loginMetaData.PW = "test";
            //        Common.OUT_AD_LOGIN ret = new Common.OUT_AD_LOGIN();


            //        ret = c.GET_AD_LOGIN(loginMetaData);
            //        throw new InvalidPluginExecutionException(ret.RESULT.ToString());



            //    }
            //}
            //catch (Exception ex)
            //{
            //    throw new InvalidPluginExecutionException("<span style=' font-family: Segoe UI Light, Segoe UI, Tahoma, Arial !important; font-weight: lighter !important;font-size: 27px !important;' >" + ex.Message + "</span>" + "\n");
            //}


        }
    }
}

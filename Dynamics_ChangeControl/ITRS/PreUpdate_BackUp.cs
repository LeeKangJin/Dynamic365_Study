// <copyright file="PreOperationnew_internal_transactionUpdate.cs" company="">
// Copyright (c) 2019 All Rights Reserved
// </copyright>
// <author></author>
// <date>2019-09-05 오후 2:44:06</date>
// <summary>Implements the PreOperationnew_internal_transactionUpdate Plugin.</summary>
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
// </auto-generated>



// To Do List - 현재 승인 대기자를 txt 필드로 만들어도  ?  메일 보내질까요 ?
using System;
using System.ServiceModel;
using Microsoft.Crm.Sdk.Messages;
using Microsoft.Xrm.Sdk;
using Microsoft.Xrm.Sdk.Query;

enum STATE : int { toTeamLeader = 1, toLawWorker = 2, toLawLeader = 3, toLawMaster = 4, toRequester = 5, toRequesterReject = 6, }
namespace CrmVSSolution_ITRS.Plugins
{

    /// <summary>
    /// PreOperationnew_internal_transactionUpdate Plugin.
    /// </summary>    
    public class PreOperationnew_internal_transactionUpdate : PluginBase
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PreOperationnew_internal_transactionUpdate"/> class.
        /// </summary>
        /// <param name="unsecure">Contains public (unsecured) configuration information.</param>
        /// <param name="secure">Contains non-public (secured) configuration information. 
        /// When using Microsoft Dynamics 365 for Outlook with Offline Access, 
        /// the secure string is not passed to a plug-in that executes while the client is offline.</param>
        public PreOperationnew_internal_transactionUpdate(string unsecure, string secure)
            : base(typeof(PreOperationnew_internal_transactionUpdate))
        {

            // TODO: Implement your custom configuration handling.
        }

        private static readonly object SyncLock = new object();


        /// <summary>
        /// Main entry point for he business logic that the plug-in is to execute.
        /// </summary>
        /// <param name="localContext">The <see cref="LocalPluginContext"/> which contains the
        /// <see cref="IPluginExecutionContext"/>,
        /// <see cref="IOrganizationService"/>
        /// and <see cref="ITracingService"/>
        /// </param>
        /// <remarks>
        /// For improved performance, Microsoft Dynamics 365 caches plug-in instances.
        /// The plug-in's Execute method should be written to be stateless as the constructor
        /// is not called for every invocation of the plug-in. Also, multiple system threads
        /// could execute the plug-in at the same time. All per invocation state information
        /// is stored in the context. This means that you should not use global variables in plug-ins.
        /// </remarks>
        protected override void ExecuteCrmPlugin(LocalPluginContext localContext)
        {
            if (localContext == null)
            {
                throw new InvalidPluginExecutionException("localContext");
            }



            try
            {
                IPluginExecutionContext context = localContext.PluginExecutionContext;
                IOrganizationService service = localContext.OrganizationService;

                if (context.IsInTransaction)
                {
                    lock (SyncLock)
                    {

                        if (context.InputParameters["Target"] is Entity)
                        {

                            //현재 승인상태 작성중 

                            Entity target = (Entity)context.InputParameters["Target"];
                            Entity inTran = service.Retrieve("new_internal_transaction", target.Id, new ColumnSet("new_l_approver1", "new_l_approver2", "new_l_approver3", "new_l_approver4", "new_l_approver5")); //필요한것만

                            //필드 변경시 1차 거래 검토 재계산. 


                            #region 요청시
                            if (!inTran.Contains("new_l_approver1") &&
                                !inTran.Contains("new_l_approver2") &&
                                !inTran.Contains("new_l_approver3") &&
                                !inTran.Contains("new_l_approver4") &&
                                !inTran.Contains("new_l_approver5")
                                )  //값이 비어있을 때 
                            {
                                if (target.Contains("new_p_request_status"))
                                {
                                    if (((OptionSetValue)target["new_p_request_status"]).Value == 100000001)
                                    {

                                        //사용자 엔티티를 뽑고 
                                        Guid userid = context.InitiatingUserId; //로그인 유저 GUID 가져오기
                                        Entity UserEntity = service.Retrieve("systemuser", userid, new ColumnSet("fullname", "new_l_department", "domainname"));
                                        EntityReference userDepartment = (EntityReference)UserEntity["new_l_department"];
                                        //사용자 부서의 부서장 GUID 를 뽑고
                                        Entity departmentEntity = service.Retrieve("new_department", userDepartment.Id, new ColumnSet("new_name", "new_l_head"));
                                        EntityReference departmentRef = (EntityReference)departmentEntity["new_l_head"];

                                        //현재 승인 대기자 및 1차 대기자 세팅

                                        target["new_l_cur_awaiter"] = departmentRef;
                                        target["new_l_approver1"] = departmentRef;

                                        //2차 승인자 - 법무팀으로 세팅
                                        target["new_l_approver2_1"] = findDepart(service, "국내법무팀");

                                        //3~4차 세팅 - retrieve multiple

                                        target["new_l_approver3"] = findAccpeter(service, "국내법무팀");
                                        target["new_l_approver4"] = findAccpeter(service, "법무담당");
                                        target["new_l_approver5"] = findAccpeter(service, "법무본부");

                                    }
                                }
                            }

                            #endregion

                            #region 이전코드
                            ////팀장인지 확인후 법무팀으로 세팅
                            //if (target.Contains("new_p_approver1"))
                            //{

                            //    Guid userid = context.InitiatingUserId;
                            //    EntityReference requester = (EntityReference)inTran["ownerid"];

                            //    Entity requesterEntity = service.Retrieve("systemuser", requester.Id, new ColumnSet("fullname", "new_l_department", "domainname"));
                            //    EntityReference requesterDepartment = null;
                            //    if (requesterEntity.Contains("new_l_department"))
                            //    {
                            //        requesterDepartment = (EntityReference)requesterEntity["new_l_department"];
                            //    }
                            //    else
                            //    {
                            //        throw new Exception("부서를 알수없습니다. IT팀에 연락 바랍니다.");
                            //    }


                            //    //요청자의 부서장
                            //    Entity departmentEntity = service.Retrieve("new_department", requesterDepartment.Id, new ColumnSet("new_name", "new_l_head"));
                            //    EntityReference departmentRef = (EntityReference)departmentEntity["new_l_head"];

                            //    //요청자의 부서장과 현재 id와 같으면
                            //    if (userid == departmentRef.Id)
                            //    {
                            //        target["new_txt_cur_awaiter"] = "국내법무팀";
                            //    }
                            //    else
                            //    {
                            //        target["new_p_approver1"] = null;
                            //        target["new_p_request_status"] = new OptionSetValue(100000000);
                            //    }


                            //}
                            ////법무팀인지 확인후 법무 팀장 세팅
                            //else if (target.Contains("new_p_approver2"))
                            //{
                            //    Guid userid = context.InitiatingUserId;

                            //    Entity accepterEntity = service.Retrieve("systemuser", userid, new ColumnSet("fullname", "new_l_department", "domainname"));
                            //    EntityReference accepterDepartment = (EntityReference)accepterEntity["new_l_department"];

                            //    Entity departmentEntity = service.Retrieve("new_department", accepterDepartment.Id, new ColumnSet("new_name", "new_l_head"));
                            //    var departmentName = departmentEntity["new_name"];

                            //    if (Convert.ToString(departmentName).Trim() == "국내법무팀")
                            //    {
                            //        target["new_txt_cur_awaiter"] = findAccpeter(service, "국내법무팀").Name;
                            //    }
                            //    else
                            //    {
                            //        target["new_p_approver2"] = null;
                            //    }



                            //}
                            ////법무팀장 확인후 법무담당 세팅
                            //else if (target.Contains("new_p_approver3"))
                            //{



                            //    Guid userid = context.InitiatingUserId;

                            //    Entity accepterEntity = service.Retrieve("systemuser", userid, new ColumnSet("fullname", "new_l_department", "domainname"));
                            //    EntityReference accepterDepartment = (EntityReference)accepterEntity["new_l_department"];

                            //    Entity departmentEntity = service.Retrieve("new_department", accepterDepartment.Id, new ColumnSet("new_name", "new_l_head"));
                            //    EntityReference departmentHead = (EntityReference)departmentEntity["new_l_head"];


                            //    if (departmentHead.Id == userid && Convert.ToString(departmentEntity["new_name"]).Substring(0, 5) == "국내법무팀")
                            //    {
                            //        target["new_txt_cur_awaiter"] = findAccpeter(service, "법무담당").Name;
                            //    }
                            //    else
                            //    {
                            //        target["new_p_approver3"] = null;
                            //    }


                            //}
                            ////로그인 유저가 법무담당이 맞는지 세팅
                            //else if (target.Contains("new_p_approver4"))
                            //{


                            //    Guid userid = context.InitiatingUserId;

                            //    Entity accepterEntity = service.Retrieve("systemuser", userid, new ColumnSet("fullname", "new_l_department", "domainname"));
                            //    EntityReference accepterDepartment = (EntityReference)accepterEntity["new_l_department"];

                            //    Entity departmentEntity = service.Retrieve("new_department", accepterDepartment.Id, new ColumnSet("new_name", "new_l_head"));
                            //    EntityReference departmentHead = (EntityReference)departmentEntity["new_l_head"];

                            //    if (departmentHead.Id == userid)
                            //    {
                            //        target["new_txt_cur_awaiter"] = "결재가 완료되었습니다"; //요청자로 설정
                            //    }
                            //    else
                            //    {
                            //        target["new_p_approver4"] = null;
                            //    }

                            //}
                            #endregion

                            #region 승인시
                            if (target.Contains("new_p_request_status"))
                            {

                                //팀장 - 승인완료시 
                                if (((OptionSetValue)target["new_p_request_status"]).Value == 100000002)
                                {
                                    target["new_p_approver1"] = new OptionSetValue(100000000);
                                }
                                //법무팀 승인 완료시
                                if (((OptionSetValue)target["new_p_request_status"]).Value == 100000003)
                                {
                                    target["new_p_approver2"] = new OptionSetValue(100000000);
                                    target["new_l_cur_awaiter"] = inTran["new_l_approver3"];
                                }
                                if (((OptionSetValue)target["new_p_request_status"]).Value == 100000004)
                                {
                                    target["new_p_approver3"] = new OptionSetValue(100000000);
                                    target["new_l_cur_awaiter"] = inTran["new_l_approver4"];
                                }
                                if (((OptionSetValue)target["new_p_request_status"]).Value == 100000005)
                                {
                                    target["new_p_approver4"] = new OptionSetValue(100000000);
                                    target["new_l_cur_awaiter"] = inTran["new_l_approver5"];
                                }


                            }

                            #endregion

                            #region 반려시
                            if (target.Contains("new_p_request_status"))
                            {
                                //법무 실무자 반려
                                if (((OptionSetValue)target["new_p_request_status"]).Value == 100000099)
                                {
                                    uint reject_number = rejectNumber(inTran);
                                    target["new_p_approver" + reject_number.ToString()] = new OptionSetValue(100000001);

                                }



                            }
                            #endregion



                        }
                    }
                }
            }

            catch (Exception ex)
            {
                throw new InvalidPluginExecutionException(ex.Message);
            }

            // TODO: Implement your custom Plug-in business logic.


        }
        public uint rejectNumber(Entity target)
        {

            if (!target.Contains("new_p_approver1"))
            {
                return 2;
            }
            if (!target.Contains("new_p_approver2"))
            {
                return 3;
            }

            if (!target.Contains("new_p_approver3"))
            {
                return 4;
            }
            if (!target.Contains("new_p_approver4"))
            {
                //error
                Console.WriteLine("예상치 못한 값이 들어왔습니다. 5차 반려 +error");
            }

            return 5;
        }

        public EntityReference findDepart(IOrganizationService service, string teamName)
        {

            ConditionExpression ce = new ConditionExpression();
            ce.AttributeName = "new_name";
            ce.Operator = ConditionOperator.Equal;
            ce.Values.Add(teamName);

            FilterExpression fe = new FilterExpression();
            fe.Conditions.Add(ce);

            QueryExpression qe = new QueryExpression("new_department");
            qe.ColumnSet.AddColumns("new_name");
            qe.Criteria.AddFilter(fe);

            EntityCollection ec = service.RetrieveMultiple(qe);

            EntityReference ret = new EntityReference();
            uint errorCheck = 0;
            Guid id = new Guid();

            foreach (var j in ec.Entities)
            {

                id = j.Id;

                errorCheck++;
            }

            if (errorCheck >= 2) { Console.WriteLine("같은 이름의 부서가 2개 이상 있을 경우"); }

            ret = new EntityReference("new_department", id);

            return ret;


        }



        public EntityReference findAccpeter(IOrganizationService service, string teamName)
        {

            ConditionExpression ce = new ConditionExpression();
            ce.AttributeName = "new_name";
            ce.Operator = ConditionOperator.Equal;
            ce.Values.Add(teamName);

            FilterExpression fe = new FilterExpression();
            fe.Conditions.Add(ce);

            QueryExpression qe = new QueryExpression("new_department");
            qe.ColumnSet.AddColumns("new_name", "new_l_head");
            qe.Criteria.AddFilter(fe);

            EntityCollection ec = service.RetrieveMultiple(qe);

            EntityReference ret = new EntityReference();
            uint errorCheck = 0;


            foreach (var j in ec.Entities)
            {

                ret = (EntityReference)j["new_l_head"];

                errorCheck++;
            }




            if (errorCheck >= 2) { Console.WriteLine("에러 로그 작성 할 것 ( 국내법무팀 / 담당이 이 두개 검색될 경우)"); }

            return ret;

        }

    }
}

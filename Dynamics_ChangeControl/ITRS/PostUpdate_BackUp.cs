// <copyright file="PostOperationnew_internal_transactionUpdate.cs" company="">
// Copyright (c) 2019 All Rights Reserved
// </copyright>
// <author></author>
// <date>2019-10-08 오후 4:26:47</date>
// <summary>Implements the PostOperationnew_internal_transactionUpdate Plugin.</summary>
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
// </auto-generated>

using System;
using System.ServiceModel;
using Microsoft.Xrm.Sdk;
using Microsoft.Xrm.Sdk.Query;

namespace CrmVSSolution_ITRS.Plugins
{

    /// <summary>
    /// PostOperationnew_internal_transactionUpdate Plugin.
    /// </summary>    
    public class PostOperationnew_internal_transactionUpdate : PluginBase
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PostOperationnew_internal_transactionUpdate"/> class.
        /// </summary>
        /// <param name="unsecure">Contains public (unsecured) configuration information.</param>
        /// <param name="secure">Contains non-public (secured) configuration information. 
        /// When using Microsoft Dynamics 365 for Outlook with Offline Access, 
        /// the secure string is not passed to a plug-in that executes while the client is offline.</param>
        public PostOperationnew_internal_transactionUpdate(string unsecure, string secure)
            : base(typeof(PostOperationnew_internal_transactionUpdate))
        {

            // TODO: Implement your custom configuration handling.
        }


        /// <summary>
        /// Main entry point for he business logic that the plug-in is to execute.
        /// </summary>
        /// <param name="localContext">The <see cref="LocalPluginContext"/> which contains the
        /// <see cref="IPluginExecutionContext"/>,
        /// <see cref="IOrganizationService"/>
        /// and <see cref="ITracingService"/>
        /// </param>
        /// <remarks>
        /// For improved performance, Microsoft Dynamics 365 caches plug-in instances.
        /// The plug-in's Execute method should be written to be stateless as the constructor
        /// is not called for every invocation of the plug-in. Also, multiple system threads
        /// could execute the plug-in at the same time. All per invocation state information
        /// is stored in the context. This means that you should not use global variables in plug-ins.
        /// </remarks>


        protected override void ExecuteCrmPlugin(LocalPluginContext localContext)
        {
            if (localContext == null)
            {
                throw new InvalidPluginExecutionException("localContext");
            }
            // TODO: Implement your custom Plug-in business logic.

            IPluginExecutionContext context = localContext.PluginExecutionContext;
            //test 1: 2에서 1로 변경 
            if (context.Depth < 1)
            {

                IOrganizationService service = localContext.OrganizationService;
                if (context.InputParameters["Target"] is Entity)
                {
                    Entity target = (Entity)context.InputParameters["Target"];

                    #region 1차 거래 검토 재반영

                    Guid thisGuid = new Guid(target["new_internal_transactionid"].ToString());

                    Entity exceptState = service.Retrieve("new_internal_transaction", thisGuid, new ColumnSet("new_p_request_status"));





                    //20 02 18 - > 법무팀 수정가능하도록 변경

                    //if (((OptionSetValue)exceptState["new_p_request_status"]).Value != 100000000)
                    //{
                    //    //To Do 
                    //    //무한 메일 확인 해볼것 
                    //    //완료 상태 및 다른 상태 일때도 법무팀은 바꾸도록 하게 해야함 

                    //}
                    //else
                    //{

                    //True Optimization 필요 -일단 빠르게 반영해야해서 true로 
                    Entity thisEntity = service.Retrieve("new_internal_transaction", thisGuid, new ColumnSet(true));
                    Entity thatEntity = service.Retrieve("new_internal_transaction", thisGuid, new ColumnSet(true));

                    //데이터 가져오기 
                    var money = ((Money)thisEntity["new_cur_amount"]).Value;

                    Entity opp_company = service.Retrieve("account", ((EntityReference)thisEntity["new_l_opp_company"]).Id, new ColumnSet("name"));
                    string oppCompany = opp_company["name"].ToString();
                    //직전 연도 매출액 하드 코딩
                    var SALESMONEY = 861884226306;

                    //검토 필요 항목
                    OptionSetValue q3_1 = (OptionSetValue)thisEntity["new_p_qustion_3_1"];
                    OptionSetValue q4 = (OptionSetValue)thisEntity["new_p_qustion_4"];
                    OptionSetValue q5 = (OptionSetValue)thisEntity["new_p_qustion_5"];
                    OptionSetValue q6 = (OptionSetValue)thisEntity["new_p_qustion_6"];
                    OptionSetValue q7 = (OptionSetValue)thisEntity["new_p_qustion_7"];
                    //OptionSetValue q8 = (OptionSetValue)target["new_p_question_8"]; 8번 문항 삭제
                    OptionSetValue credit_grant = (OptionSetValue)thisEntity["new_credit_grant"];



                    //if (havetoCheck(target) == 0)
                    //{
                    // Entity ITFS_entity = new Entity("new_internal_transaction");
                    //(target)자동 업데이트

                    //대규모 내부 거래

                    if (money >= 5000000000 && companyCheck(thisEntity, service, 1))
                    {
                        thisEntity["new_p_review_1_v2"] = new OptionSetValue(100000001);
                    }
                    else
                    {
                        thisEntity["new_p_review_1_v2"] = new OptionSetValue(100000000);
                    }
                    //이사 등 과의 거래

                    if (companyCheck(thisEntity, service, 2))
                    {
                        thisEntity["new_p_review_2"] = new OptionSetValue(100000001);

                    }
                    else
                    {
                        thisEntity["new_p_review_2"] = new OptionSetValue(100000000);
                    }



                    //이해 관계자와의 거래 
                    if (companyCheck(thisEntity, service, 3))
                    {



                        if (oppCompany == "셀트리온제약" ||
                             oppCompany == "셀트리온헬스케어"
                      )
                        {
                            thisEntity["new_p_review_3"] = new OptionSetValue(100000003);
                        }
                        else if (Convert.ToInt64(money) >= Convert.ToInt64(SALESMONEY * 0.01))
                        {
                            thisEntity["new_p_review_3"] = new OptionSetValue(100000001);
                        }
                        else
                        {
                            thisEntity["new_p_review_3"] = new OptionSetValue(100000000);
                        }

                    }

                    //부당지원
                    if (q3_1.Value == 100000001 && //모두다 아니오 일때 
                         q4.Value == 100000001 &&
                         q5.Value == 100000001 &&
                         q6.Value == 100000001 &&
                         q7.Value == 100000001)
                    {
                        thisEntity["new_p_review_4"] = new OptionSetValue(100000000);
                    }
                    else
                    {
                        thisEntity["new_p_review_4"] = new OptionSetValue(100000001);
                    }

                    //신용공여
                    // YES 이면

                    if (credit_grant.Value == 100000006)
                    {
                        thisEntity["new_p_review_5"] = new OptionSetValue(100000000);
                    }
                    else
                    {
                        thisEntity["new_p_review_5"] = new OptionSetValue(100000001);
                    }
                    #endregion

                    //update 무한루프 해결 방안

                    //계산의 변화가 있다면 
                    if (((OptionSetValue)thisEntity["new_p_review_1_v2"]).Value != ((OptionSetValue)thatEntity["new_p_review_1_v2"]).Value ||
                       ((OptionSetValue)thisEntity["new_p_review_2"]).Value != ((OptionSetValue)thatEntity["new_p_review_2"]).Value ||
                       ((OptionSetValue)thisEntity["new_p_review_3"]).Value != ((OptionSetValue)thatEntity["new_p_review_3"]).Value ||
                       ((OptionSetValue)thisEntity["new_p_review_4"]).Value != ((OptionSetValue)thatEntity["new_p_review_4"]).Value ||
                       ((OptionSetValue)thisEntity["new_p_review_5"]).Value != ((OptionSetValue)thatEntity["new_p_review_5"]).Value
                        )
                    {
                        service.Update(thisEntity);
                    }

                    //}

                }
            }




        }
        //Config로 모아줄 필요가 있음. 
        //거래처 
        private bool companyCheck(Entity target, IOrganizationService service, uint state)
        {
            string oppCompany = "";

            if (target.Contains("new_l_opp_company"))
            {

                Entity opp_company = service.Retrieve("account", ((EntityReference)target["new_l_opp_company"]).Id, new ColumnSet("name"));
                oppCompany = opp_company["name"].ToString();

            }

            int type = 0;
            if (target.Contains("new_p_global_contract_type"))
            {
                type = ((OptionSetValue)target["new_p_global_contract_type"]).Value;
            }

            /*
            100000000 - 자금거래
            100000001 - 유가증권 거래
            100000002 - 자산거래
            100000003 - 상품 또는 용역 거래
            */

            //현재 요청회사가 셀트리온이 일때만 판단함으로 존재유무만 체크
            if (target.Contains("new_l_my_company"))
            {

                Entity my_company = service.Retrieve("account", ((EntityReference)target["new_l_my_company"]).Id, new ColumnSet("name"));
                String my_company_name = my_company["name"].ToString();

                string test = ((EntityReference)target["new_l_my_company"]).Name;



                //대규모 내부거래 판단 시
                if (state == 1)
                {
                    if (type == 100000003)
                    {
                        if (oppCompany == "셀트리온홀딩스" ||
                            oppCompany == "셀트리온스킨큐어" ||
                            oppCompany == "셀트리온헬스케어" ||
                            oppCompany == "티에스이엔엠" ||
                            oppCompany == "티에스이엔씨")
                        {
                            return true;
                        }
                    }
                    else
                    {
                        if (oppCompany == "셀트리온홀딩스" ||
                           oppCompany == "셀트리온스킨큐어" ||
                           oppCompany == "셀트리온헬스케어" ||
                           oppCompany == "티에스이엔엠" ||
                           oppCompany == "티에스이엔씨" ||
                           oppCompany == "셀트리온제약" ||
                           oppCompany == "셀트리온엔터테인먼트" ||
                           oppCompany == "셀트리온 충북대 바이오메딕스" ||
                           oppCompany == "셀트리온 충북대 코스메틱스"
                           )
                        {
                            return true;
                        }

                    }

                }
                // 이사 등과의 거래 판단 시
                else if (state == 2)
                {
                    if (oppCompany == "셀트리온홀딩스" ||
                        oppCompany == "셀트리온스킨큐어" ||
                        oppCompany == "셀트리온엔터테인먼트"
                        )
                    {
                        return true;
                    }

                }
                //아해 관계자와 거래 판단 시 
                else if (state == 3)
                {


                    //관계 있는 회사 전체
                    if (oppCompany == "셀트리온홀딩스" || oppCompany == "셀트리온 영국법인 (Celltrion Europe)" ||
                          oppCompany == "셀트리온스킨큐어" || oppCompany == "셀트리온 아일랜드법인 (Celltrion BioPharma)" ||
                          oppCompany == "셀트리온헬스케어" || oppCompany == "셀트리온 러시아법인 (Celltrion  Don)" ||
                          oppCompany == "티에스이엔엠" || oppCompany == "셀트리온 러시아법인 (Celltrion  Eurasia)" ||
                          oppCompany == "티에스이엔씨" || oppCompany == "셀트리온 미국법인 (Celltrion USA)" ||
                          oppCompany == "셀트리온제약" || oppCompany == "셀트리온 필리핀법인 (Celltrion Global Safety Data Center)" ||
                          oppCompany == "셀트리온엔터테인먼트" || oppCompany == "셀트리온헬스케어 해외법인" ||
                          oppCompany == "셀트리온 충북대 바이오메딕스" || oppCompany == "셀트리온복지재단" ||
                          oppCompany == "셀트리온 충북대 코스메틱스"
                          )

                    {

                        return true;
                    }
                }
                else
                {
                    //error
                }
            }

            return false;
        }

    }
}

// <copyright file="PreOperationnew_reservesampledetailUpdate.cs" company="">
// Copyright (c) 2020 All Rights Reserved
// </copyright>
// <author></author>
// <date>2020-04-08 오전 9:31:56</date>
// <summary>Implements the PreOperationnew_reservesampledetailUpdate Plugin.</summary>
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
// </auto-generated>

using System;
using Microsoft.Xrm.Sdk;
using Plugins.Common;

namespace CrmVSSolution_RMSDEV.Plugins
{


    /// <summary>
    /// PreOperationnew_reservesampledetailUpdate Plugin.
    /// </summary>    
    public class PreOperationnew_reservesampledetailUpdate : PluginBase
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PreOperationnew_reservesampledetailUpdate"/> class.
        /// </summary>
        /// <param name="unsecure">Contains public (unsecured) configuration information.</param>
        /// <param name="secure">Contains non-public (secured) configuration information. 
        /// When using Microsoft Dynamics 365 for Outlook with Offline Access, 
        /// the secure string is not passed to a plug-in that executes while the client is offline.</param>
        public PreOperationnew_reservesampledetailUpdate(string unsecure, string secure)
            : base(typeof(PreOperationnew_reservesampledetailUpdate))
        {

            // TODO: Implement your custom configuration handling.
        }


        /// <summary>
        /// Main entry point for he business logic that the plug-in is to execute.
        /// </summary>
        /// <param name="localContext">The <see cref="LocalPluginContext"/> which contains the
        /// <see cref="IPluginExecutionContext"/>,
        /// <see cref="IOrganizationService"/>
        /// and <see cref="ITracingService"/>
        /// </param>
        /// <remarks>
        /// For improved performance, Microsoft Dynamics 365 caches plug-in instances.
        /// The plug-in's Execute method should be written to be stateless as the constructor
        /// is not called for every invocation of the plug-in. Also, multiple system threads
        /// could execute the plug-in at the same time. All per invocation state information
        /// is stored in the context. This means that you should not use global variables in plug-ins.
        /// </remarks>
        protected override void ExecuteCrmPlugin(LocalPluginContext localContext)
        {
            if (localContext == null)
            {
                throw new InvalidPluginExecutionException("localContext");
            }


            try
            {
                IPluginExecutionContext context = localContext.PluginExecutionContext;
                IOrganizationService service = localContext.OrganizationService;
                Common common = new Common();

                if (context.InputParameters["Target"] is Entity)
                {
                    Entity target = (Entity)context.InputParameters["Target"];
                    Common.OUT_PARAM ret = new Common.OUT_PARAM();

                    //#region 이벤트에 따른 기능

                    if (target.Contains("new_p_event"))
                    {

                        OptionSetValue eventstate = (OptionSetValue)target["new_p_event"];



                        switch (eventstate.Value)
                        {
                            //이동
                            case (int)Event.이동:
                                ret = common.LocationCheck(target);

                                if (ret.RESULT)
                                {
                                    target["new_l_clocation"] = target["new_l_change_location"];
                                }
                                else
                                {
                                    throw new InvalidPluginExecutionException(ret.MSG);
                                }

                                break;
                            //불출
                            case (int)Event.불출:
                                ret = common.AmountCheck(target);

                                if (ret.RESULT)
                                {
                                    target["new_i_cur_number"] -= Convert.ToInt32(target["new_issuaranceamount"])
                                }
                                else
                                {
                                    throw new InvalidPluginExecutionException(ret.MSG);
                                }

                                break;
                            //폐기
                            case (int)Event.폐기:
                                target["new_i_cur_number"] = 0;
                                break;
                            //리뷰
                            case (int)Event.리뷰:
                                target["statuscode"] = new OptionSetValue(2);
                                target["statecode"] = new OptionSetValue(1);
                                break;




                        }

                    }

                    //#endregion


                    #region ID 인증 관련

                    //LDAP Check. 


                    Common.IN_AD_LOGIN loginMetaData = new Common.IN_AD_LOGIN();


                    loginMetaData.ID = target["new_txt_id"].ToString();
                    loginMetaData.PW = target["new_txt_pw"].ToString();


                    ret = common.GET_AD_LOGIN(loginMetaData);

                    if (ret.RESULT == false)
                    {
                        throw new InvalidPluginExecutionException(ret.MSG);
                    }
                    #endregion

                    #region 입력 필드 초기화

                    //target["new_p_event"] = null;
                    //target["new_l_change_location"] = null;
                    //target["new_issuaranceamount"] = null;
                    //target["new_ntxt_comment"] = null;
                    //target["new_txt_id"] = null;
                    //target["new_txt_pw"] = null;
                    #endregion


                }
            }
            catch (Exception ex)
            {
                throw new InvalidPluginExecutionException("<span style=' font-family: Segoe UI Light, Segoe UI, Tahoma, Arial !important; font-weight: lighter !important;font-size: 27px !important;' >" + ex.Message + "</span>" + "\n");
            }


        }
    }
}

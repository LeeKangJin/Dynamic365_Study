// <copyright file="PreOperationnew_weekly_report_detailUpdate.cs" company="">
// Copyright (c) 2020 All Rights Reserved
// </copyright>
// <author></author>
// <date>2020-01-08 오후 5:39:41</date>
// <summary>Implements the PreOperationnew_weekly_report_detailUpdate Plugin.</summary>
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
// </auto-generated>

using System;
using System.ServiceModel;
using Microsoft.Xrm.Sdk;
using Microsoft.Xrm.Sdk.Query;

namespace CellCrmVSSolution1.CellCRMPlugin
{


   
    /// <summary>
    /// PreOperationnew_weekly_report_detailUpdate Plugin.
    /// </summary>    
    public class PreOperationnew_weekly_report_detailUpdate : PluginBase
    {
        private static readonly object SyncLock = new object();
        /// <summary>
        /// Initializes a new instance of the <see cref="PreOperationnew_weekly_report_detailUpdate"/> class.
        /// </summary>
        /// <param name="unsecure">Contains public (unsecured) configuration information.</param>
        /// <param name="secure">Contains non-public (secured) configuration information. 
        /// When using Microsoft Dynamics 365 for Outlook with Offline Access, 
        /// the secure string is not passed to a plug-in that executes while the client is offline.</param>
        public PreOperationnew_weekly_report_detailUpdate(string unsecure, string secure)
            : base(typeof(PreOperationnew_weekly_report_detailUpdate))
        {

            // TODO: Implement your custom configuration handling.
        }


        /// <summary>
        /// Main entry point for he business logic that the plug-in is to execute.
        /// </summary>
        /// <param name="localContext">The <see cref="LocalPluginContext"/> which contains the
        /// <see cref="IPluginExecutionContext"/>,
        /// <see cref="IOrganizationService"/>
        /// and <see cref="ITracingService"/>
        /// </param>
        /// <remarks>
        /// For improved performance, Microsoft Dynamics 365 caches plug-in instances.
        /// The plug-in's Execute method should be written to be stateless as the constructor
        /// is not called for every invocation of the plug-in. Also, multiple system threads
        /// could execute the plug-in at the same time. All per invocation state information
        /// is stored in the context. This means that you should not use global variables in plug-ins.
        /// </remarks>
        /// 
        public void Upsert(Entity target, Entity report_detail, IOrganizationService service, int day, string[] taskName, string[] expectName, string[] actualName, DateTime report_stanard) {

            //target 으로 report _ detail 이 넘어옴. 
            Entity task = new Entity("task");

            if (target.Contains("new_name")) {
                task["subject"] = target["new_name"];
            }
            else if (report_detail.Contains("new_name")) {
                task["subject"] = report_detail["new_name"];
            }

            if (target.Contains("new_txt_subject"))
            {
                task["description"] = target["new_txt_subject"];
            }
            else if (report_detail.Contains("new_txt_subject"))
            {
                task["description"] = target["new_txt_subject"];
            }

            task["scheduledstart"] = report_stanard.AddDays(day + 1);
            task["scheduledend"] = report_stanard.AddDays(day + 1);
            
            if (target.Contains(expectName[day])) {
                task["expectminutes"] = target[expectName[day]];
            }

            if (target.Contains(actualName[day])) {
                task["actualdurationminutes"] = target[actualName[day]];
            }
            

            if (target.Contains("new_l_related_task_master")) {

                task["regardingobjectid"] = target["new_l_related_task_master"];

            }
            else if (target.Contains("new_l_related_project_detail")) {
                task["regardingobjectid"] = target["new_l_related_project_detail"];
            }
            else {
                if (report_detail.Contains("new_l_related_task_master")) {
                    task["regardingobjectid"] = target["new_l_related_task_master"];
                }

                else if (report_detail.Contains("new_l_related_project_detail")) {
                    task["regardingobjectid"] = target["new_l_related_project_detail"];
                }

            }
            Guid reportId = new Guid();
            if (target.Contains("new_l_weekly_report")) {
                reportId = ((EntityReference)target["new_l_weekly_report"]).Id;
            }

            else if (report_detail.Contains("new_l_weekly_report")) {
                reportId = ((EntityReference)report_detail["new_l_weekly_report"]).Id;
            }
            

            task["new_l_weekly_report"] = new EntityReference("new_weekly_report", reportId);
            task["new_l_weekly_report_detail"] = new EntityReference("new_weekly_report_detail", target.Id);

            // task 유무 확인
            if (report_detail.Contains(taskName[day])) {
                service.Update(task);
            }

            else {
                service.Create(task);
            }
            

         
        }

        protected override void ExecuteCrmPlugin(LocalPluginContext localContext)
        {
            if (localContext == null)
            {
                throw new InvalidPluginExecutionException("localContext");
            }

            try
            {
                IPluginExecutionContext context = localContext.PluginExecutionContext;
                IOrganizationService service = localContext.OrganizationService;

                if (context.IsInTransaction)
                {
                    lock (SyncLock)
                    {
                        if (context.Depth < 2) { 

                        if (context.InputParameters["Target"] is Entity)
                        {

                            Entity target = (Entity)context.InputParameters["Target"]; ;
                            Entity report_detail = service.Retrieve("new_weekly_report_detail", target.Id, new Microsoft.Xrm.Sdk.Query.ColumnSet(true));

                            Entity report = new Entity();

                            //기준일자를 가져오기 위함. 
                            if (report_detail.Contains("new_l_weekly_report"))
                            {
                                report = service.Retrieve("new_weekly_report", ((EntityReference)report_detail["new_lweekly_report"]).Id, new Microsoft.Xrm.Sdk.Query.ColumnSet(
                                    "new_dt_standard"
                                ));
                            }
                             
                                
                                bool[] expectDay = { false, false, false, false, false };
                                bool[] actualDay = { false, false, false, false, false };
                                string[] expectName = { "new_d_input_expected_monday", "new_d_input_expected_tuesday", "new_d_input_expected_wednesday", "new_d_input_expected_thursday", "new_d_input_expected_friday" };
                                string[] actualName = { "new_d_input_real_monday", "new_d_input_real_tuesday", "new_d_input_real_wednesday", "new_d_input_real_thursday", "new_d_input_real_friday" };
                                string[] taskName = { "new_l_task_monday", "new_l_task_tuesday", "new_l_task_wednesday", "new_l_task_thursday", "new_l_task_friday" };

                                #region 들어온 요일 값 체크

                            
                                for (int i=0; i<5; i++)
                                {
                                    if (target.Contains(expectName[i])) {
                                        expectDay[i] = true;
                                    }

                                    if (target.Contains(actualName[i])) {
                                        actualDay[i] = true;
                                    }

                                }
                                #endregion

                                int repeatNumber = 0;

                                if (target.Contains("new_p_repeat")) {

                                    repeatNumber = ((OptionSetValue)target["new_p_repeat"]).Value - 100000000;

                                }
                                #region 월~금 업데이트

                                //upsert function 
                                //  = 관련 항목이 있으면 update ,없으면 create

                                for (int day = 0; day < 5; day++)
                                {

                                    //  1. 예상 실적 모두 target 있을 경우
                                    if (expectDay[day] && actualDay[day])
                                    {
                                        // 타겟 예상이 0 , 타겟 실적이 0 이면 제거
                                        if (Convert.ToInt32(target[expectName[day]]) == 0 &&
                                            Convert.ToInt32(target[actualName[day]]) == 0
                                            )
                                        {
                                            //Delete 코드 구현 To Do
                                        }

                                        // 타겟 예상이 0 , 타겟 실적이 0이아니면 upsert
                                        else
                                        {
                                            Upsert(target, report_detail, service, day, taskName, expectName, actualName, (DateTime)report["new_dt_standard"]);
                                            
                                        }


                                    }
                                    //   2. 예상만 target 있을 경우
                                    else if (expectDay[day])
                                    {

                                        // 타겟 예상이 0 , 리트 실적이 0 이면 제거
                                        if (Convert.ToInt32(target[expectName[day]]) == 0 &&
                                            Convert.ToInt32(report_detail[actualName[day]]) == 0
                                            )
                                        {
                                            //Delete 코드 구현
                                        }

                                        // 타겟 예상이 0 , 리트 실적이 0이아니면 upsert
                                        else
                                        {
                                            Upsert(target, report_detail, service, day, taskName, expectName, actualName, (DateTime)report["new_dt_standard"]);
                                            
                                        }


                                    }
                                    //   3. 실적 target 있을 경우
                                    else if (actualDay[day])
                                    {
                                        // 리트 예상이 0 , 타겟 실적이 0 이면 제거
                                        if (Convert.ToInt32(report_detail[expectName[day]]) == 0 &&
                                            Convert.ToInt32(target[actualName[day]]) == 0
                                            )
                                        {
                                            //Delete 코드 구현
                                        }

                                        // 리트 예상이 0 , 타겟 실적이 0이아니면 upsert
                                        else
                                        {
                                            Upsert(target, report_detail, service, day, taskName, expectName, actualName, (DateTime)report["new_dt_standard"]);
                                        }


                                    }
                                    //   4. 둘다 없을 경우. 
                                    else {
                                        //nothing
                                    }
                                    

                                }
                                #endregion

                                #region 주간 Master 업데이트 - To Do 

                                #endregion

                                #region Repeat 기능 구현 -To Do

                                // Linked List 가 구현이 완료 되어야 함. 

                                //REPEAT 기능은 다른 기능을 모두 구현이 되었을 때 구현 하기 

                                //repeat 하였을 때 target + ret 둘다 비교해서 넣어주기.

                                //repeat 기능 - create하는데 target으로 예상만 복사. 

                                //Contain을 통해서 무슨 요일들이 바뀌 었는지 배열로 저장.

                                //해당 target에 맞는 주차

                                //for문으로 바뀐 친구들을 업데이트 만약 해당 task 가 없다며 ㄴcreate..


                                #endregion


                            }


                        }

                        }



                    }


                }


            
            catch (Exception ex)
            {
                throw new InvalidPluginExecutionException(ex.Message);
            }
        }
    }
}

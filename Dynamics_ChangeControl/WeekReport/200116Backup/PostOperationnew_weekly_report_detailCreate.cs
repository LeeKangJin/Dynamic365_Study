// <copyright file="PostOperationnew_weekly_report_detailCreate.cs" company="">
// Copyright (c) 2020 All Rights Reserved
// </copyright>
// <author></author>
// <date>2020-01-08 오후 5:39:26</date>
// <summary>Implements the PostOperationnew_weekly_report_detailCreate Plugin.</summary>
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
// </auto-generated>

using Microsoft.Xrm.Sdk;
using Microsoft.Xrm.Sdk.Query;
using System;


namespace CellCrmVSSolution1.CellCRMPlugin
{

    /// <summary>
    /// PostOperationnew_weekly_report_detailCreate Plugin.
    /// </summary>    
    public class PostOperationnew_weekly_report_detailCreate: PluginBase
    {


        private static readonly object SyncLock = new object();
        /// <summary>
        /// Initializes a new instance of the <see cref="PostOperationnew_weekly_report_detailCreate"/> class.
        /// </summary>
        /// <param name="unsecure">Contains public (unsecured) configuration information.</param>
        /// <param name="secure">Contains non-public (secured) configuration information. 
        /// When using Microsoft Dynamics 365 for Outlook with Offline Access, 
        /// the secure string is not passed to a plug-in that executes while the client is offline.</param>
        public PostOperationnew_weekly_report_detailCreate(string unsecure, string secure)
            : base(typeof(PostOperationnew_weekly_report_detailCreate))
        {
            
           // TODO: Implement your custom configuration handling.
        }


        /// <summary>
        /// Main entry point for he business logic that the plug-in is to execute.
        /// </summary>
        /// <param name="localContext">The <see cref="LocalPluginContext"/> which contains the
        /// <see cref="IPluginExecutionContext"/>,
        /// <see cref="IOrganizationService"/>
        /// and <see cref="ITracingService"/>
        /// </param>
        /// <remarks>
        /// For improved performance, Microsoft Dynamics 365 caches plug-in instances.
        /// The plug-in's Execute method should be written to be stateless as the constructor
        /// is not called for every invocation of the plug-in. Also, multiple system threads
        /// could execute the plug-in at the same time. All per invocation state information
        /// is stored in the context. This means that you should not use global variables in plug-ins.
        /// </remarks>
        protected override void ExecuteCrmPlugin(LocalPluginContext localContext)
        {
            if (localContext == null)
            {
                throw new InvalidPluginExecutionException("localContext");
            }

            //Search Start Date, End Date
            try
            {
                IPluginExecutionContext context = localContext.PluginExecutionContext;
                IOrganizationService service = localContext.OrganizationService;

                if (context.IsInTransaction)
                {
                    lock (SyncLock)
                    {
                        if (context.InputParameters["Target"] is Entity)
                        {
                            Entity target = (Entity)context.InputParameters["Target"];
                            //월~금 데이터 가져오기 위한 report detail retrieve
                            Entity report_detail = service.Retrieve("new_weekly_report_detail", target.Id, new Microsoft.Xrm.Sdk.Query.ColumnSet(true
                                ));
                            Entity report = new Entity();

                            //년 월 주차 데이터 가져오기 위한 report retrieve
                            if (report_detail.Contains("new_l_weekly_report")) {
                                report = service.Retrieve("new_weekly_report", ((EntityReference)report_detail["new_lweekly_report"]).Id, new Microsoft.Xrm.Sdk.Query.ColumnSet(
                                    "new_p_year",
                                    "new_p_month",
                                    "new_p_week",
                                    "new_dt_standard"
                                    ));
                             }
                            else {
                                throw new InvalidPluginExecutionException("주간 업무보고가 매칭 되지 않았습니다.");
                            }

                            Double monday = Convert.ToDouble(report_detail["new_d_input_expected_monday"]);
                            Double tuesday = Convert.ToDouble(report_detail["new_d_input_expected_tuesday"]);
                            Double wednesday = Convert.ToDouble(report_detail["new_d_input_expected_wednesday"]);
                            Double thursday = Convert.ToDouble(report_detail["new_d_input_expected_thursday"]);
                            Double friday = Convert.ToDouble(report_detail["new_d_input_expected_friday"]);

                            Double[] timeList = { monday, tuesday, wednesday, thursday, friday };
                            bool[] insertList = { false, false, false, false, false };

                            //월 ~ 금 입력된 것 찾기

                            var year = Convert.ToInt32(report["new_i_year"]);
                            var month = Convert.ToInt32(report["new_i_month"]);
                            var week = Convert.ToInt32(report["new_i_week"]) - 1;

                            DateTime firstdateofyear = new DateTime(year, month, 1);
                            DateTime firstdateoffirstweek = firstdateofyear.AddDays(7 - (int)(firstdateofyear.DayOfWeek) + 1);
                       
                            for (int i = 0; i < 5; i++) {

                                if (timeList[i] != 0) {

                                    //task 세팅
                                    Entity task = new Entity("task");

                                    //new name은 work flow 여서 늦게 올라올 수 있음. 
                                    task["subject"] = report_detail["new_name"];

                                    task["description"] = report_detail["new_txt_subject"];


                                    //마스터 기준 날짜 생성 완료시 날짜 생성 공식 제거 To Do 
                                    
                                    //날짜 생성 공식 사용
                                    DateTime datetime = firstdateoffirstweek.AddDays(7 * (week - 1) + i);

                                    //마스터 기준 날짜 사용
                                    datetime = ((DateTime)report["new_dt_standard"]).AddDays(i + 1);

                                    task["scheduledstart"] = datetime;
                                    task["Scheduledend"]= datetime;

                                    task["expectminutes"] = timeList[i];

                                    //멀티 룩업 ObjectType 에 따라 받을지 말지 결정하는 코드 추가 필요
                                    //To Do

                                    if (report_detail.Contains("new_l_related_task_master")) {
                                        task["regardingobjectid"] = report_detail["new_l_related_task_master"];
                                    }
                                    else if (report_detail.Contains("new_l_related_project_detail"))
                                    {
                                        task["regardingobjectid"] = report_detail["new_l_related_project_detail"];
                                    }


                                    task["new_l_weekly_report"] = new EntityReference("new_weekly_report_detail",report_detail.Id);
                                    task["new_l_weekly_report_detail"] = new EntityReference("new_weekly_report", report.Id);
                                    

                                  
                                    service.Create(task);

                                }
                            }

                         
                            context.InputParameters["target"] = target;
                        }
                     
                    }
                }
            }
            catch (Exception ex)
            {
                throw new InvalidPluginExecutionException("localContext");
            }


            // TODO: Implement your custom Plug-in business logic.
        }
    }
}
